//=- fox32ISelDAGToDAG.h - A dag to dag inst selector for fox32 ---===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the fox32 target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_FOX32_FOX32ISELDAGTODAG_H
#define LLVM_LIB_TARGET_FOX32_FOX32ISELDAGTODAG_H

#include "fox32.h"
#include "fox32Subtarget.h"
#include "fox32TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

// fox32-specific code to select fox32 machine instructions for
// SelectionDAG operations.
namespace llvm {
class fox32DAGToDAGISel : public SelectionDAGISel {
  const fox32Subtarget *Subtarget = nullptr;

public:
  explicit fox32DAGToDAGISel(fox32TargetMachine &TM) : SelectionDAGISel(TM) {}

  StringRef getPassName() const override {
    return "fox32 DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<fox32Subtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *Node) override;

  bool SelectBaseAddr(SDValue Addr, SDValue &Base);

  bool selectShiftMask(SDValue N, unsigned ShiftWidth, SDValue &ShAmt);
  bool selectShiftMaskGRLen(SDValue N, SDValue &ShAmt) {
    return selectShiftMask(N, Subtarget->getGRLen(), ShAmt);
  }
  bool selectShiftMask32(SDValue N, SDValue &ShAmt) {
    return selectShiftMask(N, 32, ShAmt);
  }

  bool selectSExti32(SDValue N, SDValue &Val);
  bool selectZExti32(SDValue N, SDValue &Val);

// Include the pieces autogenerated from the target description.
#include "fox32GenDAGISel.inc"
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_FOX32_FOX32ISELDAGTODAG_H
