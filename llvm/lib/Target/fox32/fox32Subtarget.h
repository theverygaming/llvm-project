//===- fox32Subtarget.h - Define Subtarget for the fox32 -*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the fox32 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_FOX32_FOX32SUBTARGET_H
#define LLVM_LIB_TARGET_FOX32_FOX32SUBTARGET_H

#include "fox32FrameLowering.h"
#include "fox32ISelLowering.h"
#include "fox32InstrInfo.h"
#include "fox32RegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "fox32GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class fox32Subtarget : public fox32GenSubtargetInfo {
  virtual void anchor();
  unsigned GRLen = 32;
  MVT GRLenVT = MVT::i32;
  fox32FrameLowering FrameLowering;
  fox32InstrInfo InstrInfo;
  fox32RegisterInfo RegInfo;
  fox32TargetLowering TLInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  fox32Subtarget &initializeSubtargetDependencies(const Triple &TT,
                                                  StringRef CPU, StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  fox32Subtarget(const Triple &TT, StringRef CPU, StringRef FS,
                 const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const fox32FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const fox32InstrInfo *getInstrInfo() const override {
    printf("%s:%s:%d\n", __func__, __FILE__, __LINE__);
    return &InstrInfo;
  }
  const fox32TargetLowering *getTargetLowering() const override {
    printf("%s:%s:%d\n", __func__, __FILE__, __LINE__);
    return &TLInfo;
  }
  const fox32RegisterInfo *getRegisterInfo() const override {
    printf("%s:%s:%d\n", __func__, __FILE__, __LINE__);
    return &RegInfo;
  }
  MVT getGRLenVT() const {
    printf("%s:%s:%d\n", __func__, __FILE__, __LINE__);
    return GRLenVT;
  }
  unsigned getGRLen() const {
    printf("%s:%s:%d\n", __func__, __FILE__, __LINE__);
    return GRLen;
  }
};
} // end namespace llvm

#endif // LLVM_LIB_TARGET_FOX32_FOX32SUBTARGET_H
